"""
Django settings for OMS project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

from .mySettings import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'kawsk8xrs0ydv!et9wgry-%&df@y-36^)ap&e5ss+hujm4((1c'

# DEBUG CONFIG
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': 'apps.Platform.middleware.showToolbar',
}

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = [
    "*"
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'djcelery',
    'channels',
    'apps.Pagination.apps.PaginationConfig',
    'apps.Platform.apps.PlatformConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'apps.Pagination.middleware.PaginationMiddleware',
    'apps.Platform.middleware.PlatformMiddleware',
]

ROOT_URLCONF = 'entrance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
ASGI_APPLICATION = 'entrance.asgi.application'
WSGI_APPLICATION = 'entrance.wsgi.application'

LOGIN_URL = '/user/login'
LOGIN_REDIRECT_URL = '/'

AUTH_USER_MODEL = 'Platform.User'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
#
SQL_MODE = [
    'NO_ENGINE_SUBSTITUTION',
    'STRICT_TRANS_TABLES',
]
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MySQLConf.Database,
        'USER': MySQLConf.User,
        'PASSWORD': MySQLConf.Password,
        'HOST': MySQLConf.Host,
        'PORT': MySQLConf.Port,
        'ATOMIC_REQUESTS': True,
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='%s'" % ','.join(SQL_MODE),
        }
    }
}

# CACHED
# SESSION_COOKIE_AGE = 5
SESSION_COOKIE_AGE = 2000 * 60 * 60
SESSION_SAVE_EVERY_REQUEST = True
SESSION_ENGINE = "redis_sessions.session"
SESSION_REDIS = {
    'host': RedisConf.Host,
    'port': RedisConf.Port,
    'db': 0,
    'prefix': 'session',
}

def getCacheBackend(db=1):
    return "redis://{}:{}/{}".format(RedisConf.Host, RedisConf.Port, db)


# The cache backends to use.
CACHES = {
    # django 默认缓存配置
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": getCacheBackend(0),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# celery
import djcelery

djcelery.setup_loader()
BROKER_URL = 'amqp://{}@{}:{}//'.format(CeleryConf.User, CeleryConf.Host, CeleryConf.Port)
CELERY_RESULT_BACKEND = BROKER_URL
# 设置默认的队列名称，如果一个消息不符合其他的队列就会放在默认队列里面，如果什么都不设置的话，数据都会发送到默认的队列中
CELERY_DEFAULT_QUEUE = "default"
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
# 每个worker执行了多少任务就会死掉
CELERYD_MAX_TASKS_PER_CHILD = 20
# 任务过期时间,celery任务执行结果的超时时间
CELERY_TASK_RESULT_EXPIRES = 60 * 20
# 设置详细的队列
CELERY_QUEUES = {
    "default": {  # 这是上面指定的默认队列
        "exchange": "default",
        "exchange_type": "direct",
        "routing_key": "default"
    }
}
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = USE_TZ
# 存储在django数据库中
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERYD_HIJACK_ROOT_LOGGER = False
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'collectStatic')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

# 初始化临时目录
TEMP_PATH = os.path.join(BASE_DIR, 'tmp')
if not os.path.exists(TEMP_PATH):
    os.makedirs(TEMP_PATH)

LOG_PATH = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)

# 日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(name)s [%(asctime)s] %(levelname)s : %(message)s'
        },
        'verbose': {
            'format': '%(name)s [%(asctime)s] %(levelname)s %(filename)s:%(lineno)d %(module)s.%(funcName)s: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'standard': {
            'format': '%(name)s %(asctime)s [%(levelname)s]- %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': "DEBUG",
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'adminFile': {
            'level': "INFO",
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(LOG_PATH, 'oms.log'),
        },
        'celery': {
            'level': "INFO",
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(LOG_PATH, 'celery.log'),
            'formatter': 'verbose',
        },
        'tasks': {
            'level': "INFO",
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(LOG_PATH, 'tasks.log'),
            'formatter': 'verbose',
        },
        'db_handle': {
            'level': "INFO",
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(LOG_PATH, 'db.log'),
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'adminFile'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['celery', 'console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'tasks': {
            'handlers': ['tasks', 'console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        # 'django': {
        #     'handlers': ['console'],
        #     'level': LOG_LEVEL,
        #     'propagate': False,
        # },
        'django.db': {
            'handlers': ['db_handle'],
            'level': 'INFO',
            # 'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}
